name: CI-CD pipeline

on:
  push:
    branches:
      - main


jobs:
  integration:
      name: Continuous integration
      runs-on: ubuntu-latest
      
      
      steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Lint code
        run: echo "linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
      name: Push to ECR
      needs: integration
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v4 

        - name: Install Utilities
          run: |
           sudo apt-get update
           sudo apt-get Install  -y jq unzip

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
    
  Continuous-Deployment:
     runs-on: self-hosted
     needs: build-and-push-ecr-image
     steps:
       - name: Configure AWS credentials
         uses: aws-actions/configure-aws-credentials@v4
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: ${{ secrets.AWS_REGION }}

       - name: Login to Amazon ECR
         id: login-ecr
         uses: aws-actions/amazon-ecr-login@v3

       - name: Pull latest image from ECR
         env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY : ${{ secrets.ECR_REPOSITORY_NAME }}
            AWS-REGION: ${{ secrets.AWS_REGION }}
            AWS-ACCESS-KEY-ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS-SECRET-ACCESS-KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            IMAGE_TAG: latest
        
         run: |
            docker login -u AWS -p $(aws ecr get-login-password --region $AWS_REGION) $ECR_REGISTRY
            sudo chmod 666 /var/run/docker.sock
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
       - name: Delete Previous Container on EC2
         env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
              IMAGE_TAG: latest
         run: |
            docker rm -f dhote/groceryrecommendation || true
          
       - name: Run Docker Image to serve users
          
         run: |
             docker run -d -p 8080:8080 --ipc="host" --name=grocery -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
       - name: Clean previous images and containers
         run: |
             docker system prune -f     
      

